diff --git a/ports/libjpeg-turbo/0001_fill_jpeg_buffer_cb.patch b/ports/libjpeg-turbo/0001_fill_jpeg_buffer_cb.patch
new file mode 100644
index 000000000..de639b0a2
--- /dev/null
+++ b/ports/libjpeg-turbo/0001_fill_jpeg_buffer_cb.patch
@@ -0,0 +1,161 @@
+diff --git a/jdatasrc.c b/jdatasrc.c
+index eadb4a2..6af41b5 100644
+--- a/jdatasrc.c
++++ b/jdatasrc.c
+@@ -36,6 +36,18 @@ typedef struct {
+ 
+ typedef my_source_mgr *my_src_ptr;
+ 
++/* Expanded data source object for cb input */
++typedef struct {
++	struct jpeg_source_mgr pub;   /* public fields */
++
++	PFJPEGDECOMP_FILL_FN fill_fn;                /* source fn callback */
++	void* fill_ctx;               /* source ctx */
++	JOCTET* buffer;               /* start of buffer */
++	boolean start_of_file;        /* have we gotten any data yet? */
++} my_cb_source_mgr;
++
++typedef my_cb_source_mgr* my_cb_src_ptr;
++
+ #define INPUT_BUF_SIZE  4096    /* choose an efficiently fread'able size */
+ 
+ 
+@@ -56,6 +68,18 @@ init_source(j_decompress_ptr cinfo)
+   src->start_of_file = TRUE;
+ }
+ 
++METHODDEF(void)
++init_cb_source(j_decompress_ptr cinfo)
++{
++  my_cb_src_ptr src = (my_cb_src_ptr)cinfo->src;
++
++  /* We reset the empty-input-file flag for each image,
++   * but we don't clear the input buffer.
++   * This is correct behavior for reading a series of images from one source.
++   */
++  src->start_of_file = TRUE;
++}
++
+ #if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+ METHODDEF(void)
+ init_mem_source(j_decompress_ptr cinfo)
+@@ -123,6 +147,31 @@ fill_input_buffer(j_decompress_ptr cinfo)
+   return TRUE;
+ }
+ 
++METHODDEF(boolean)
++fill_cb_input_buffer(j_decompress_ptr cinfo)
++{
++	my_cb_src_ptr src = (my_cb_src_ptr)cinfo->src;
++	size_t nbytes;
++
++	nbytes = (src->fill_fn)(src->fill_ctx, src->buffer, INPUT_BUF_SIZE);
++
++	if (nbytes <= 0) {
++		if (src->start_of_file)     /* Treat empty input file as fatal error */
++			ERREXIT(cinfo, JERR_INPUT_EMPTY);
++		WARNMS(cinfo, JWRN_JPEG_EOF);
++		/* Insert a fake EOI marker */
++		src->buffer[0] = (JOCTET)0xFF;
++		src->buffer[1] = (JOCTET)JPEG_EOI;
++		nbytes = 2;
++	}
++
++	src->pub.next_input_byte = src->buffer;
++	src->pub.bytes_in_buffer = nbytes;
++	src->start_of_file = FALSE;
++
++	return TRUE;
++}
++
+ #if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+ METHODDEF(boolean)
+ fill_mem_input_buffer(j_decompress_ptr cinfo)
+@@ -252,6 +301,47 @@ jpeg_stdio_src(j_decompress_ptr cinfo, FILE *infile)
+   src->pub.next_input_byte = NULL; /* until buffer loaded */
+ }
+ 
++GLOBAL(void)
++jpeg_cb_src(j_decompress_ptr cinfo, PFJPEGDECOMP_FILL_FN fill_fn, void* fill_ctx)
++{
++	my_cb_src_ptr src;
++
++	/* The source object and input buffer are made permanent so that a series
++	 * of JPEG images can be read from the same file by calling jpeg_stdio_src
++	 * only before the first one.  (If we discarded the buffer at the end of
++	 * one image, we'd likely lose the start of the next one.)
++	 */
++	if (cinfo->src == NULL) {     /* first time for this JPEG object? */
++		cinfo->src = (struct jpeg_source_mgr*)
++			(*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_PERMANENT,
++				sizeof(my_cb_source_mgr));
++		src = (my_cb_src_ptr)cinfo->src;
++		src->buffer = (JOCTET*)
++			(*cinfo->mem->alloc_small) ((j_common_ptr)cinfo, JPOOL_PERMANENT,
++				INPUT_BUF_SIZE * sizeof(JOCTET));
++	}
++	else if (cinfo->src->init_source != init_cb_source) {
++		/* It is unsafe to reuse the existing source manager unless it was created
++		 * by this function.  Otherwise, there is no guarantee that the opaque
++		 * structure is the right size.  Note that we could just create a new
++		 * structure, but the old structure would not be freed until
++		 * jpeg_destroy_decompress() was called.
++		 */
++		ERREXIT(cinfo, JERR_BUFFER_SIZE);
++	}
++
++	src = (my_cb_src_ptr)cinfo->src;
++	src->pub.init_source = init_cb_source;
++	src->pub.fill_input_buffer = fill_cb_input_buffer;
++	src->pub.skip_input_data = skip_input_data;
++	src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
++	src->pub.term_source = term_source;
++	src->fill_fn = fill_fn;
++	src->fill_ctx = fill_ctx;
++	src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
++	src->pub.next_input_byte = NULL; /* until buffer loaded */
++}
++
+ 
+ #if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+ /*
+diff --git a/jpeglib.h b/jpeglib.h
+index 33f8ad2..ac67cb0 100644
+--- a/jpeglib.h
++++ b/jpeglib.h
+@@ -706,6 +706,7 @@ struct jpeg_decompress_struct {
+   struct jpeg_color_quantizer *cquantize;
+ };
+ 
++typedef size_t (*PFJPEGDECOMP_FILL_FN)(void* fill_ctx, JOCTET* buffer, size_t buffer_size);
+ 
+ /* "Object" declarations for JPEG modules that may be supplied or called
+  * directly by the surrounding application.
+@@ -915,6 +916,7 @@ EXTERN(void) jpeg_destroy_decompress(j_decompress_ptr cinfo);
+ /* Caller is responsible for opening the file before and closing after. */
+ EXTERN(void) jpeg_stdio_dest(j_compress_ptr cinfo, FILE *outfile);
+ EXTERN(void) jpeg_stdio_src(j_decompress_ptr cinfo, FILE *infile);
++EXTERN(void) jpeg_cb_src(j_decompress_ptr cinfo, PFJPEGDECOMP_FILL_FN fill_fn, void* fill_ctx);
+ 
+ #if JPEG_LIB_VERSION >= 80 || defined(MEM_SRCDST_SUPPORTED)
+ /* Data source and destination managers: memory buffers. */
+diff --git a/win/jpeg62-memsrcdst.def b/win/jpeg62-memsrcdst.def
+index 4d24a14..da0ad34 100755
+--- a/win/jpeg62-memsrcdst.def
++++ b/win/jpeg62-memsrcdst.def
+@@ -106,3 +106,4 @@ EXPORTS
+   jpeg_crop_scanline @ 105 ;
+   jpeg_read_icc_profile @ 106 ;
+   jpeg_write_icc_profile @ 107 ;
++  jpeg_cb_src @ 108 ;
+\ No newline at end of file
+diff --git a/win/jpeg62.def b/win/jpeg62.def
+index f3c69b2..dc558fa 100755
+--- a/win/jpeg62.def
++++ b/win/jpeg62.def
+@@ -104,3 +104,4 @@ EXPORTS
+   jpeg_crop_scanline @ 103 ;
+   jpeg_read_icc_profile @ 104 ;
+   jpeg_write_icc_profile @ 105 ;
++  jpeg_cb_src @ 106 ;
diff --git a/ports/libjpeg-turbo/portfile.cmake b/ports/libjpeg-turbo/portfile.cmake
index a4fbb5b66..baf1ad2ae 100644
--- a/ports/libjpeg-turbo/portfile.cmake
+++ b/ports/libjpeg-turbo/portfile.cmake
@@ -11,6 +11,8 @@ vcpkg_from_github(
 		
         #workaround for vcpkg bug see #5697 on github for more information
         workaround_cmake_system_processor.patch
+
+		0001_fill_jpeg_buffer_cb.patch
 )
 
 if(VCPKG_TARGET_ARCHITECTURE STREQUAL "arm" OR VCPKG_TARGET_ARCHITECTURE STREQUAL "arm64" OR (VCPKG_CMAKE_SYSTEM_NAME AND NOT VCPKG_CMAKE_SYSTEM_NAME STREQUAL "WindowsStore"))
